#lang ivy1.7

include leader_trans
include leader_spec
include timeout
include ring

isolate system = {
    object server(self: node) = {
        instance timer : timeout_sec

        implement timer.timeout {
            call trans.send_forward(self, ring.next(self), idn(self));
        }

        implement trans.recv_forward(i: id) {
            if i = idn(self) {  # Found a leader
                call spec.elect(self);
                call trans.send_elected(self, self);
            } else if i > idn(self) { # pass message to next node
                call trans.send_forward(self, ring.next(self), i);
            }
        }
    }

    invariant [safety] trans.elected(N) -> spec.leader(N)

} with ring, spec, trans, id_injective, id

import trans.recv_elected

extract iso_impl(me:node) = system, system.server(me), net(me), trans(me), idn(me), node, id, ring
