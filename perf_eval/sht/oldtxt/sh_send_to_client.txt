	class udp_reader : public reader {
	          int sock;
		          int my_id;
			          thunk__net__impl__handle_recv rcb;
				    				    ivy_class *ivy;
								            // udp_config *conf;
									           bool bound;
										     	  public:
												    udp_reader(int _my_id, thunk__net__impl__handle_recv rcb, ivy_class *ivy)
												      		           : my_id(_my_id), rcb(rcb), ivy(ivy), bound(false) {
															     		    	      sock = socket(AF_INET, SOCK_DGRAM, 0);
																		             if (sock < 0)
																			       	          { std::cerr << "cannot create socket\n"; exit(1); }

              }
	                    void bind_int() {
			                      if (!bound) {
					                            struct sockaddr_in myaddr;
								                          get_addr_dyno(my_id,myaddr,-1);
											                       std::cout << "********binding id: " << my_id << " port: " << ntohs(myaddr.sin_port) << std::endl;
													                             if (::bind(sock, (struct sockaddr *)&myaddr, sizeof(myaddr)) < 0)
																                               { std::cerr << "bind failed\n"; exit(1); }
																			                         }
																						                   bound = true;
																								                 }

  																										     virtual void bind() {
																										       	             ivy -> __lock();  // can be asynchronous, so must lock ivy!
																												                       bind_int();
																																        ivy -> __unlock();
																																	        }
																																			    virtual ~udp_reader() {
																																			      #ifdef _WIN32
																																			                        closesocket(sock);
																																						  #else
																																							        close(sock);
																																								  #endif
																																									    }
																																										    virtual void get_addr(int my_id, sockaddr_in &myaddr) {
																																										      	    	 memset((char *)&myaddr, 0, sizeof(myaddr));
																																												   	      		 unsigned long inetaddr;
																																															   	       unsigned long inetport;
																																																         	        // if (!conf) {
																																																			//                 conf = ivy -> get_udp_config();
																																																			//                   }
																																																			      // conf -> get(my_id,inetaddr,inetport);
																																																			              myaddr.sin_family = AF_INET;
																																																				        		  myaddr.sin_addr.s_addr = htonl(inetaddr);
																																																							    			   myaddr.sin_port = htons(5990+42);
																																																										     		       }

  																																																												           virtual int fdes() {
																																																													     	       return sock;
																																																														                  }


  																																																																      virtual void get_addr_dyno(int my_id, sockaddr_in &myaddr, int val) {
																																																																              	   memset((char *)&myaddr, 0, sizeof(myaddr));
																																																																		     			   unsigned long inetaddr;
																																																																					     	    	 unsigned long inetport;
																																																																							   	       myaddr.sin_family = AF_INET;
																																																																								         		   myaddr.sin_addr.s_addr = htonl(inetaddr);
																																																																											         if(my_id == -1){
																																																																												         myaddr.sin_port = htons(4942 + 0); // random port for server frontend (could be anything)
																																																																													       }else{
																																																																													               myaddr.sin_port = htons(4990+ my_id);
																																																																														             }

      char *addr = server_map.at(my_id);
            if (inet_aton(addr, &myaddr.sin_addr)==0) {
	                  fprintf(stderr, "inet_aton() failed\n");
			                exit(1);
					            }

  						        }


  							    virtual void read() {
							          // std::cout << "RECEIVING UDP !!!!!! !!!!! \n";
								             int len=0;
									                       socklen_t lenlen=4;
											         #ifdef _WIN32
												   	        if (getsockopt(sock,SOL_SOCKET,SO_RCVBUF,(char *)&len,&lenlen))
														  #else
															        if (getsockopt(sock,SOL_SOCKET,SO_RCVBUF,&len,&lenlen))
																  #endif
																	            { perror("getsockopt failed"); exit(1); }
																		      			         std::vector<char> buf(len);
																						   		           int bytes;
																										if ((bytes = recvfrom(sock,&buf[0],len,0,0,0)) < 0)
																										   	       { std::cerr << "recvfrom failed\n"; exit(1); }
																											         	           buf.resize(bytes);
																															        sht_system::msg pkt;
																																  		        try {
																																				    ivy_binary_deser ds(buf);
																																				              // std::cout << "Bbuff =  " << buf.size() << "\n";
																																					         	       __deser(ds,pkt);
																																							                 buf.clear();
																																										            if (ds.pos < buf.size())
																																											                       throw deser_err();
																																													                         } catch (deser_err &){
																																																   	 	        std::cout << "BAD PACKET RECEIVED " << sock << "\n";
																																																			  	         return;
																																																							}
																																																									ivy->__lock();
																																																											rcb(pkt);
																																																													ivy->__unlock();
																																																														    }
																																																															    virtual void write(int dst, sht_system::msg pkt) {
																																																															      	            bind_int();
																																																																			struct sockaddr_in dstaddr;
																																																																			       		   get_addr_dyno(dst,dstaddr,-1);
																																																																							ivy_binary_ser sr;
																																																																							  	               __ser(sr,pkt);
																																																																												//std::cout << "SENDING\n";
																																																																												  	       if (sendto(sock,&sr.res[0],sr.res.size(),0,(sockaddr *)&dstaddr,sizeof(sockaddr_in)) < 0)
																																																																													         #ifdef _WIN32
																																																																																     { std::cerr << "sendto failed " << WSAGetLastError() << "\n"; exit(1); }
																																																																																       #else
																																																																																			     { std::cerr << "sendto failed\n"; exit(1); }
																																																																																			       #endif

  																																																																																			           }



  																																																																																				       virtual void writeToFRONTEND(int dst, sht_system::msg pkt) {
																																																																																				                       bind_int();
																																																																																									struct sockaddr_in dstaddr;
																																																																																									       		   ivy_binary_ser sr;
																																																																																											     		          __ser(sr,pkt);

                      struct sockaddr_in serveraddr;
														// std::cout << "SENDING TO CLIENT" << pkt.m_value << "\n";

                      get_addr_dyno(-1,serveraddr,0);
		                               if (sendto(sock,&sr.res[0],sr.res.size(),0,(sockaddr *)&serveraddr,sizeof(sockaddr_in)) < 0)
					                            #ifdef _WIN32
								                                  { std::cerr << "sendto failed " << WSAGetLastError() << "\n"; exit(1); }
												                       #else
														                                     { std::cerr << "sendto failed\n"; exit(1); }
																		                          #endif

           }

        // }


  	};
